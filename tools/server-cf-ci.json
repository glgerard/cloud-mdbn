{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "MDBN EC2 instance",
  "Parameters": {
    "KeyName": {
      "Description": "key for SSH access",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Must be the name of an existing key pair."
    },
    "VPC": {
      "Description": "Select the default VPC.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "AvZone": {
      "Description": "Select an availability zone",
      "Type": "String"
    },
    "Subnet": {
      "Description": "Select the subnet of the chosen availability zone.",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "S3Bucket": {
      "Description": "The S3 Bucket.",
      "Type": "String"
    },
    "DynamoDBTable": {
      "Description": "The DynamoDB Table Name.",
      "Type": "String"
    }
  },
  "Mappings": {
    "EC2RegionMap": {
      "eu-west-1": {
        "MinicondaTheanoUbuntuXenial64bit": "ami-21cde547"
      }
    }
  },
  "Resources": {
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "t2.micro",
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "EC2RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "MinicondaTheanoUbuntuXenial64bit"
          ]
        },
        "SubnetId": {
          "Ref": "Subnet"
        },
        "AvailabilityZone": {
          "Ref": "AvZone"
        },
        "Tags": [
          {
            "Key": "system",
            "Value": "mdbn"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "export S3_BUCKET=",
                {
                  "Ref": "S3Bucket"
                },
                "\n",
                "export DB_TABLE=",
                {
                  "Ref": "DynamoDBTable"
                },
                "\n",
                "curl -s https://raw.githubusercontent.com/glgerard/cloud-mdbn/master/tools/aws_setup_ci.sh | bash -ex\n"
              ]
            ]
          }
        },
        "SecurityGroupIds": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IamRoleInstanceProfile"
        },
        "Volumes": [
          {
            "Device": "/dev/sdk",
            "VolumeId": {
              "Ref": "DataVolume"
            }
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "7f5462a9-7e6b-46e7-a83f-82a08693b4d0"
        }
      }
    },
    "DataVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "Size": "16",
        "AvailabilityZone": {
          "Ref" : "AvZone"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "4f4edd29-0d48-41d2-b274-c10b8b307e73"
        }
      }
    },
    "IamRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          "aws-ec2-mdbn"
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "dda195ed-3b46-4457-b57c-da3eb558a276"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable access to MDBN server",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "91270c50-7eef-4252-a1ec-c36a692e1db0"
        }
      }
    }
  },
  "Outputs": {
    "ServerIP": {
      "Description": "Public IP address of the server",
      "Value": {
        "Fn::GetAtt": [
          "EC2Instance",
          "PublicIp"
        ]
      }
    }
  }
}